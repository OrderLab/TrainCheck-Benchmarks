{"text_description": "Consistency Relation between torch.nn.Parameter.grad and torch.nn.Parameter.grad", "relation": "ConsistencyRelation", "params": [{"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "grad"}, {"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "grad"}], "precondition": {"var": {"inverted": true, "preconditions": [{"clauses": [{"type": "unequal", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int"}]}, {"clauses": [{"type": "unequal", "prop_name": "attributes._ML_DAIKON_grad_ID", "additional_path": "None", "prop_dtype": "float"}]}]}}, "num_positive_examples": 2828, "num_negative_examples": 6799}
{"text_description": "FunctionCoverRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 121, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.nn.modules.linear.Linear.forward", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.dropout and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.log_softmax and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 121, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.log_softmax and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.log_softmax and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.log_softmax and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.log_softmax and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.log_softmax and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.nll_loss and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 121, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.nll_loss and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 121, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.nll_loss and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.nll_loss and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.nll_loss and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.nll_loss and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.functional.dropout", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.modules.linear.Linear.forward", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.functional.relu and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.init.calculate_gain and torch.nn.init.uniform_", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.init.kaiming_uniform_ and torch.nn.init.uniform_", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.conv.Conv2d.forward and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 121, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.modules.linear.Linear.forward", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.dropout.Dropout.forward and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 121, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.nn.functional.log_softmax", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.nn.functional.nll_loss", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.linear.Linear.forward and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.children and torch.distributed.distributed_c10d.is_initialized", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}, {"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.children and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.children and torch.optim.lr_scheduler.LRScheduler.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.children and torch.optim.lr_scheduler.StepLR.get_lr", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.named_children and torch.distributed.distributed_c10d.is_initialized", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}, {"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.named_children and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.named_children and torch.nn.modules.module.Module.named_parameters", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_parameters"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 8, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.named_children and torch.optim.lr_scheduler.LRScheduler.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.named_children and torch.optim.lr_scheduler.StepLR.get_lr", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.register_parameter and torch.nn.init.calculate_gain", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.register_parameter and torch.nn.init.kaiming_uniform_", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.register_parameter and torch.nn.init.uniform_", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.register_parameter and torch.nn.modules.linear.Linear.reset_parameters", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.train and torch.distributed.distributed_c10d.is_initialized", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.train"}, {"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.nn.modules.module.Module.train and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.train"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.adadelta.Adadelta.step and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.adadelta.Adadelta.step and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.optim.adadelta.adadelta and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.adadelta.adadelta and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_cover": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}]}}, "num_positive_examples": 101, "num_negative_examples": 1}
{"text_description": "FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.modules.module.Module.eval", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.optim.adadelta.Adadelta.step", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.optim.adadelta.adadelta", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 102, "num_negative_examples": 0}
{"text_description": "FunctionCoverRelation between torch.utils.data.dataloader.DataLoader.check_worker_number_rationality and torch.PyCapsule.set_vital", "relation": "FunctionCoverRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.utils.data.dataloader.DataLoader.check_worker_number_rationality"}, {"param_type": "APIParam", "api_full_name": "torch.PyCapsule.set_vital"}], "precondition": {"func_cover": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.module.Module.children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.module.Module.named_children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.distributed.distributed_c10d.is_initialized and torch.nn.modules.module.Module.train", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.train"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.boolean_dispatch.<locals>.fn and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.dropout and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.dropout and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.log_softmax and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.functional.nll_loss and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 121, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.calculate_gain and torch.nn.init.uniform_", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.calculate_gain and torch.nn.modules.module.Module.register_parameter", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.kaiming_uniform_ and torch.nn.init.uniform_", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.kaiming_uniform_ and torch.nn.modules.module.Module.register_parameter", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.uniform_ and torch.nn.init.calculate_gain", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.uniform_ and torch.nn.init.kaiming_uniform_", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.init.uniform_ and torch.nn.modules.module.Module.register_parameter", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.register_parameter"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.conv.Conv2d.forward and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.dropout.Dropout.forward and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.linear.Linear.forward and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.linear.Linear.forward and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.linear.Linear.forward and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 243, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.module.Module.children and torch.nn.modules.module.Module.named_children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 34, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.nn.modules.module.Module.named_parameters and torch.nn.modules.module.Module.named_children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 7, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.Adadelta.step and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.adadelta.adadelta and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.distributed.distributed_c10d.is_initialized", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.eval", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.named_children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.train", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.train"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.optim.adadelta.Adadelta.step", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.optim.adadelta.adadelta", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.distributed.distributed_c10d.is_initialized", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.distributed.distributed_c10d.is_initialized"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.module.Module.children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.module.Module.eval", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.eval"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.module.Module.named_children", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.named_children"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.nn.modules.module.Module.train", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.module.Module.train"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.optim.adadelta.Adadelta.step", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.optim.adadelta.adadelta", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.lr_scheduler.StepLR.get_lr and torch.optim.optimizer.Optimizer.zero_grad", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}, {"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.functional.boolean_dispatch.<locals>.fn", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.functional.dropout", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.functional.log_softmax", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.functional.nll_loss", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.functional.relu", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.modules.conv.Conv2d.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.modules.dropout.Dropout.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.nn.modules.linear.Linear.forward", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.optim.adadelta.Adadelta.step", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "FunctionLeadRelation between torch.optim.optimizer.Optimizer.zero_grad and torch.optim.adadelta.adadelta", "relation": "FunctionLeadRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}], "precondition": {"func_lead": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 101, "num_negative_examples": 0}
{"text_description": "TBD merged", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.optimizer.Optimizer.zero_grad"}, {"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "grad", "pre_value": "non_zero", "post_value": null}], "precondition": {"parent_func_call_pre": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [0]}]}, {"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init", "testing"]}]}]}}, "num_positive_examples": 20, "num_negative_examples": 1}
{"text_description": "TBD merged", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "data", "pre_value": "non_zero", "post_value": "non_zero"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 21, "num_negative_examples": 0}
{"text_description": "TBD merged", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "grad", "pre_value": null, "post_value": "non_zero"}], "precondition": {"parent_func_call_pre": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [1]}]}, {"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init", "testing"]}]}]}}, "num_positive_examples": 20, "num_negative_examples": 1}
{"text_description": "TBD merged", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "data", "pre_value": "non_zero", "post_value": "non_zero"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "TBD merged", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "VarTypeParam", "var_type": "torch.nn.Parameter", "attr_name": "grad", "pre_value": null, "post_value": "non_zero"}], "precondition": {"parent_func_call_pre": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.step", "additional_path": "None", "prop_dtype": "int", "values": [1]}]}, {"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init", "testing"]}]}]}}, "num_positive_examples": 19, "num_negative_examples": 1}
{"text_description": "The value 10 is consistent across the input [0, 'shape', 1] and output [0, 'shape', 1] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 1152 is consistent across the input [0, 'nbytes'] and output [0, 'nbytes'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 2] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 2] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 3] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 3] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 2] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 2] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 3] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 12 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 3] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 128 is consistent across the input [0, 'nbytes'] and output [0, 'nbytes'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 2 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 2 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 2359296 is consistent across the input [0, 'nbytes'] and output [0, 'nbytes'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 2359296 is consistent across the input [0, 'nbytes'] and output [0, 'nbytes'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 2560 is consistent across the input [0, 'nbytes'] and output [0, 'nbytes'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 26 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 2] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 26 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 3] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 26 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 2] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 26 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 3] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 3 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 2] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "The value 3 is consistent across the input [0, 'shape', 2] and output [0, 'shape', 3] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "The value 3 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 2] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 2], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "The value 3 is consistent across the input [0, 'shape', 3] and output [0, 'shape', 3] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 3], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "The value 32 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 32 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 32 is consistent across the input [0, 'shape', 1] and output [0, 'shape', 1] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'itemsize'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'nbytes'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'ndim'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'itemsize'] and output [0, 'ndim'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'itemsize'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'itemsize'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["itemsize"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 4 is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 5537792 is consistent across the input [0, 'nbytes'] and output [0, 'nbytes'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["nbytes"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 0] and output [0, 'shape', 0] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 0], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 1] and output [0, 'shape', 1] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 1] and output [0, 'shape', 1] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value 64 is consistent across the input [0, 'shape', 1] and output [0, 'shape', 1] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_cuda'] and output [0, 'is_cuda'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cuda"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ipu'] and output [0, 'is_ipu'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ipu"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_meta'] and output [0, 'is_meta'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_meta"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mkldnn'] and output [0, 'is_mkldnn'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mkldnn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_mtia'] and output [0, 'is_mtia'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mtia"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_nested'] and output [0, 'is_nested'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_nested"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_ort'] and output [0, 'is_ort'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_ort"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_quantized'] and output [0, 'is_quantized'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_quantized"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse'] and output [0, 'is_sparse'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_sparse_csr'] and output [0, 'is_sparse_csr'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_sparse_csr"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_vulkan'] and output [0, 'is_vulkan'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_vulkan"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xla'] and output [0, 'is_xla'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xla"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'is_xpu'] and output [0, 'is_xpu'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_xpu"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value False is consistent across the input [0, 'retains_grad'] and output [0, 'retains_grad'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["retains_grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 60, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad'] and output [0, 'name'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 60, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 142, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 60, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 60, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 142, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 60, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 40, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [0, 'name'] and output [0, 'name'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'grad'] and output [0, 'grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'grad'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'grad'] and output [0, 'name'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'grad_fn'] and output [0, 'grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'grad_fn'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'grad_fn'] and output [0, 'name'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'name'] and output [0, 'grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'name'] and output [0, 'grad_fn'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["grad_fn"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "The value None is consistent across the input [1, 'name'] and output [0, 'name'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 1, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["name"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_cpu'] and output [0, 'is_cpu'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_cpu"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_leaf'] and output [0, 'is_leaf'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_leaf"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'is_mps'] and output [0, 'is_mps'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["is_mps"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'ndim'] and output [0, 'ndim'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["ndim"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'requires_grad'] and output [0, 'requires_grad'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["requires_grad"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value True is consistent across the input [0, 'shape', 1] and output [0, 'shape', 1] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["shape", 1], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.functional.boolean_dispatch.<locals>.fn.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.boolean_dispatch.<locals>.fn", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.functional.dropout.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.dropout", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.dropout", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.functional.log_softmax.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.log_softmax", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.log_softmax", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.functional.nll_loss.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.nll_loss", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.nll_loss", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.functional.relu.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.relu", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.functional.relu", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.init.kaiming_uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.init.kaiming_uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.init.uniform_.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.init.uniform_", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.init.uniform_", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.modules.conv.Conv2d.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.modules.conv.Conv2d.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.modules.dropout.Dropout.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.modules.dropout.Dropout.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "The value torch.float32 is consistent across the input [0, 'dtype'] and output [0, 'dtype'] tensors of the function torch.nn.modules.linear.Linear.forward.", "relation": "ConsistentInputOutputRelation", "params": [{"param_type": "InputOutputParam", "name": "input_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": true}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "InputOutputParam", "name": "output_tensors", "index": 0, "type": "torch.Tensor", "additional_path": ["dtype"], "api_name": "torch.nn.modules.linear.Linear.forward", "is_input": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.functional.dropout is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.functional.log_softmax is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.functional.nll_loss is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.functional.relu is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.init.uniform_ is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "dtype of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently torch.float32.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "dtype", "const_value": "torch.float32"}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.functional.dropout is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.functional.log_softmax is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.functional.nll_loss is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.functional.relu is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.init.uniform_ is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "grad of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "grad_fn of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad_fn", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "grad_fn of the tensors returned by the function torch.nn.init.uniform_ is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "grad_fn", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.init.uniform_ is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_cpu of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_cuda of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_cuda", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ipu of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ipu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_leaf of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_leaf", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_leaf of the tensors returned by the function torch.nn.init.uniform_ is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_leaf", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_leaf of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_leaf", "const_value": false}], "precondition": {"pre_event": {"inverted": true, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["testing"]}]}]}}, "num_positive_examples": 204, "num_negative_examples": 40}
{"text_description": "is_leaf of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_leaf", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["testing"]}]}]}}, "num_positive_examples": 40, "num_negative_examples": 204}
{"text_description": "is_meta of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_meta of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_meta", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mkldnn of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mkldnn", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.functional.log_softmax is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.functional.nll_loss is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.functional.relu is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_mps of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mps", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_mtia of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_mtia", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_nested of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_nested", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_ort of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_ort", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_quantized of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_quantized", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_sparse_csr of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_sparse_csr", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_vulkan of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_vulkan", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xla of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xla", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "is_xpu of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "is_xpu", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.functional.dropout is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.functional.log_softmax is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.functional.nll_loss is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.functional.relu is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.init.uniform_ is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "itemsize of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "itemsize", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.functional.dropout is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.functional.log_softmax is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.functional.nll_loss is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.functional.relu is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.init.uniform_ is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "name of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently None.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "name", "const_value": null}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "nbytes of the tensors returned by the function torch.nn.functional.nll_loss is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "nbytes", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "ndim of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "ndim", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "ndim of the tensors returned by the function torch.nn.functional.log_softmax is consistently 2.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "ndim", "const_value": 2}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "ndim of the tensors returned by the function torch.nn.functional.nll_loss is consistently 0.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "ndim", "const_value": 0}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "ndim of the tensors returned by the function torch.nn.init.uniform_ is consistently 1.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "ndim", "const_value": 1}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "ndim of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently 4.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "ndim", "const_value": 4}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "ndim of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently 2.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "ndim", "const_value": 2}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "requires_grad of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "requires_grad", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "requires_grad of the tensors returned by the function torch.nn.init.uniform_ is consistently True.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "requires_grad", "const_value": true}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.functional.boolean_dispatch.<locals>.fn is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.boolean_dispatch.<locals>.fn"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.functional.dropout is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.functional.log_softmax is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.log_softmax"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.functional.nll_loss is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.functional.relu is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.relu"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 366, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.init.kaiming_uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.init.uniform_ is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.modules.conv.Conv2d.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.modules.dropout.Dropout.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "retains_grad of the tensors returned by the function torch.nn.modules.linear.Linear.forward is consistently False.", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.forward"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "retains_grad", "const_value": false}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 244, "num_negative_examples": 0}
{"text_description": "shape of the tensors returned by the function torch.nn.functional.nll_loss is consistently ().", "relation": "ConsistentOutputRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}, {"param_type": "VarTypeParam", "var_type": "torch.Tensor", "attr_name": "shape", "const_value": []}], "precondition": {"pre_event": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 122, "num_negative_examples": 0}
{"text_description": "torch.library.Library.impl has distinct input arguments on difference PT for each step", "relation": "DistinctArgumentRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.library.Library.impl"}], "precondition": {"distinct_arg": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 91, "num_negative_examples": 0}
{"text_description": "torch.nn.functional.nll_loss has distinct input arguments on difference PT for each step", "relation": "DistinctArgumentRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.functional.nll_loss"}], "precondition": {"distinct_arg": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 90, "num_negative_examples": 0}
{"text_description": "torch.nn.init.kaiming_uniform_ contains torch.is_grad_enabled with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.is_grad_enabled"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 12, "num_negative_examples": 0}
{"text_description": "torch.nn.init.kaiming_uniform_ contains torch.nn.init._calculate_correct_fan with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init._calculate_correct_fan", "arguments": {"args": {"mode": {"str": "fan_in"}}, "func_name": "torch.nn.init._calculate_correct_fan"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "torch.nn.init.kaiming_uniform_ contains torch.nn.init._calculate_fan_in_and_fan_out with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init._calculate_fan_in_and_fan_out"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "torch.nn.init.kaiming_uniform_ contains torch.nn.init.calculate_gain with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain", "arguments": {"args": {"nonlinearity": {"str": "leaky_relu"}, "param": {"float": 2.23606797749979}}, "func_name": "torch.nn.init.calculate_gain"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "torch.nn.init.kaiming_uniform_ has distinct input arguments on difference PT for each step", "relation": "DistinctArgumentRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_"}], "precondition": {"distinct_arg": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 6, "num_negative_examples": 0}
{"text_description": "torch.nn.init.uniform_ contains torch.is_grad_enabled with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.is_grad_enabled"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 12, "num_negative_examples": 0}
{"text_description": "torch.nn.init.uniform_ contains torch.nn.init._no_grad_uniform_ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init._no_grad_uniform_", "arguments": {"args": {"generator": {"NoneType": null}}, "func_name": "torch.nn.init._no_grad_uniform_"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "torch.nn.init.uniform_ has distinct input arguments on difference PT for each step", "relation": "DistinctArgumentRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"distinct_arg": {"inverted": false, "preconditions": [{"clauses": "Unconditional"}]}}, "num_positive_examples": 6, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.conv.Conv2d.forward contains torch._VariableFunctionsClass.conv2d with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch._VariableFunctionsClass.conv2d"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training", "testing"]}]}]}}, "num_positive_examples": 42, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.conv.Conv2d.forward contains torch.nn.modules.conv.Conv2d._conv_forward with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.modules.conv.Conv2d._conv_forward", "arguments": {"args": {"self": {"torch.nn.modules.conv.Conv2d": {}}}, "func_name": "torch.nn.modules.conv.Conv2d._conv_forward"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training", "testing"]}]}]}}, "num_positive_examples": 42, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.dropout.Dropout.forward contains torch.nn.functional.dropout with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout", "arguments": {"args": {"training": {"bool": true}, "inplace": {"bool": false}}, "func_name": "torch.nn.functional.dropout"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 26, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.dropout.Dropout.forward contains torch.nn.functional.dropout with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.dropout.Dropout.forward"}, {"param_type": "APIParam", "api_full_name": "torch.nn.functional.dropout", "arguments": {"args": {"training": {"bool": false}, "inplace": {"bool": false}}, "func_name": "torch.nn.functional.dropout"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["testing"]}]}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.is_grad_enabled with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.is_grad_enabled"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 12, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.nn.init._calculate_correct_fan with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init._calculate_correct_fan", "arguments": {"args": {"mode": {"str": "fan_in"}}, "func_name": "torch.nn.init._calculate_correct_fan"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.nn.init._calculate_fan_in_and_fan_out with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init._calculate_fan_in_and_fan_out"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 4, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.nn.init._no_grad_uniform_ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init._no_grad_uniform_", "arguments": {"args": {"generator": {"NoneType": null}}, "func_name": "torch.nn.init._no_grad_uniform_"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.nn.init.calculate_gain with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.calculate_gain", "arguments": {"args": {"nonlinearity": {"str": "leaky_relu"}, "param": {"float": 2.23606797749979}}, "func_name": "torch.nn.init.calculate_gain"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.nn.init.kaiming_uniform_ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.kaiming_uniform_", "arguments": {"args": {"a": {"float": 2.23606797749979}}, "func_name": "torch.nn.init.kaiming_uniform_"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "torch.nn.modules.linear.Linear.reset_parameters contains torch.nn.init.uniform_ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.nn.modules.linear.Linear.reset_parameters"}, {"param_type": "APIParam", "api_full_name": "torch.nn.init.uniform_"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["init"]}]}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "torch.optim.adadelta.Adadelta.step contains torch.is_grad_enabled with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.is_grad_enabled"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 63, "num_negative_examples": 0}
{"text_description": "torch.optim.adadelta.Adadelta.step contains torch.optim.adadelta.Adadelta._init_group with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta._init_group", "arguments": {"args": {"self": {"torch.optim.adadelta.Adadelta": {}}, "params_with_grad": {"list": []}, "grads": {"list": []}, "square_avgs": {"list": []}, "acc_deltas": {"list": []}}, "func_name": "torch.optim.adadelta.Adadelta._init_group"}}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 21, "num_negative_examples": 0}
{"text_description": "torch.optim.adadelta.Adadelta.step contains torch.utils._foreach_utils._get_foreach_kernels_supported_devices with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.utils._foreach_utils._get_foreach_kernels_supported_devices"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 21, "num_negative_examples": 0}
{"text_description": "torch.optim.adadelta.Adadelta.step contains torch.utils._foreach_utils._get_fused_kernels_supported_devices with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.Adadelta.step"}, {"param_type": "APIParam", "api_full_name": "torch.utils._foreach_utils._get_fused_kernels_supported_devices"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 21, "num_negative_examples": 0}
{"text_description": "torch.optim.adadelta.adadelta contains torch.utils._foreach_utils._get_foreach_kernels_supported_devices with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.utils._foreach_utils._get_foreach_kernels_supported_devices"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "torch.optim.adadelta.adadelta contains torch.utils._foreach_utils._get_fused_kernels_supported_devices with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.adadelta.adadelta"}, {"param_type": "APIParam", "api_full_name": "torch.utils._foreach_utils._get_fused_kernels_supported_devices"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 20, "num_negative_examples": 0}
{"text_description": "torch.optim.lr_scheduler.LRScheduler.step contains torch.optim.lr_scheduler.StepLR.get_lr with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.StepLR.get_lr"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training"]}]}]}}, "num_positive_examples": 2, "num_negative_examples": 0}
{"text_description": "torch.optim.lr_scheduler.LRScheduler.step contains torch.optim.lr_scheduler._enable_get_lr_call.__enter__ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler._enable_get_lr_call.__enter__"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training", "init"]}]}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "torch.optim.lr_scheduler.LRScheduler.step contains torch.optim.lr_scheduler._enable_get_lr_call.__exit__ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler._enable_get_lr_call.__exit__"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training", "init"]}]}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
{"text_description": "torch.optim.lr_scheduler.LRScheduler.step contains torch.optim.lr_scheduler._enable_get_lr_call.__init__ with exception: NOT SET", "relation": "APIContainRelation", "params": [{"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler.LRScheduler.step"}, {"param_type": "APIParam", "api_full_name": "torch.optim.lr_scheduler._enable_get_lr_call.__init__"}], "precondition": {"parent_func_call_pre": {"inverted": false, "preconditions": [{"clauses": [{"type": "constant", "prop_name": "meta_vars.stage", "additional_path": "None", "prop_dtype": "str", "values": ["training", "init"]}]}]}}, "num_positive_examples": 3, "num_negative_examples": 0}
